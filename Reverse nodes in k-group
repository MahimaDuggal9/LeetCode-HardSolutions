
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head==null || k<=1){
            return head;
        }
        List<Integer> array=new ArrayList<>();
        //add linked list nodes to an array
        ListNode current=head;
      while(current!=null){
        array.add(current.val);
        current=current.next;
      }
    //reverse each k group

    for(int i=0;i+k<=array.size();i+=k){
        reverse(array,i,i+k-1);
    }

    //convert back to linked list
    ListNode dummy=new ListNode(0);
    current=dummy;
    for(int value:array){
        current.next=new ListNode(value);
        current=current.next;
    }
    return dummy.next;
    }
    //reverse logic
    private void reverse(List<Integer> array,int start,int end){
        while(start<end){
        int temp=array.get(start);
        array.set(start,array.get(end));
        array.set(end,temp);
        
        start++;
        end--;
    }
    }
}
