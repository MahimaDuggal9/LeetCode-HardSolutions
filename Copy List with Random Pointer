/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
  

public Node copyRandomList(Node head) {
    if (head == null) {
        return null;
    }

    // Step 1: Create new nodes and interweave them with the original nodes
    Node current = head;
    while (current != null) {
        Node copy = new Node(current.val);
        copy.next = current.next;
        current.next = copy;
        current = copy.next;
    }

    // Step 2: Set the random pointers for the copied nodes
    current = head;
    while (current != null) {
        if (current.random != null) {
            current.next.random = current.random.next;
        }
        current = current.next.next;
    }

    // Step 3: Separate the original and copied lists
    current = head;
    Node copyHead = head.next;
    Node copyCurrent = copyHead;
    while (current != null) {
        current.next = current.next.next;  // Restore the original list
        if (copyCurrent.next != null) {
            copyCurrent.next = copyCurrent.next.next;  // Move to the next copied node
            copyCurrent = copyCurrent.next;
        }
        current = current.next;
    }

    return copyHead;
}

}
