class LRUCache {

    // Define the node class for the doubly linked list
    class DListNode {
        int key, value;
        DListNode prev, next;
        public DListNode(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }

    private Map<Integer, DListNode> cache;
    private int capacity;
    private DListNode head, tail;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.cache = new HashMap<>();
        
        // Dummy head and tail to avoid edge case handling for head/tail
        head = new DListNode(0, 0);
        tail = new DListNode(0, 0);
        
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if (cache.containsKey(key)) {
            DListNode node = cache.get(key);
            moveToHead(node); // Move the accessed node to the head
            return node.value;
        }
        return -1; // Key not found
    }
    
    public void put(int key, int value) {
        if (cache.containsKey(key)) {
            DListNode node = cache.get(key);
            node.value = value; // Update the value
            moveToHead(node); // Move the updated node to the head
        } else {
            DListNode newNode = new DListNode(key, value);
            cache.put(key, newNode);
            addToHead(newNode); // Add the new node to the head
            
            if (cache.size() > capacity) {
                DListNode tailNode = removeTail(); // Remove the least recently used item
                cache.remove(tailNode.key);
            }
        }
    }
    
    // Helper function to move a node to the head
    private void moveToHead(DListNode node) {
        removeNode(node);
        addToHead(node);
    }

    // Helper function to add a node to the head
    private void addToHead(DListNode node) {
        node.prev = head;
        node.next = head.next;
        head.next.prev = node;
        head.next = node;
    }

    // Helper function to remove a node
    private void removeNode(DListNode node) {
        DListNode prev = node.prev;
        DListNode next = node.next;
        
        prev.next = next;
        next.prev = prev;
    }

    // Helper function to remove the tail (least recently used node)
    private DListNode removeTail() {
        DListNode res = tail.prev;
        removeNode(res);
        return res;
    }
}


/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
